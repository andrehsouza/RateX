//
//  HomePresenter.swift
//  RateX
//
//  Created by Andre Souza on 16/07/2018.
//  Copyright (c) 2018 Andre. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit

final class HomePresenter {

    // MARK: - Private properties -

    private unowned var _view: HomeViewInterface
    private var _interactor: HomeInteractorInterface
    private var _wireframe: HomeWireframeInterface
    
    private let _allCurrencies: [Currency] = Currency.allCases
    private var _selectedTopIndex: Int = -1
    private var _selectedBottomIndex: Int = -1
//    private var _cache: [CurrencyRates] = []
    private var _cache = [CacheCurrencyRates]()

    // MARK: - Lifecycle -

    init(wireframe: HomeWireframeInterface, view: HomeViewInterface, interactor: HomeInteractorInterface) {
        _wireframe = wireframe
        _view = view
        _interactor = interactor
    }
}

// MARK: - Extensions -

extension HomePresenter: HomePresenterInterface {
    
    func viewDidLoad() {
        _view.reloadDatas()
    }
    
    func showCurrencyRatesInfo() {
        if let currencyRate = _cache.filter({ $0.base == _allCurrencies[_selectedTopIndex] }).first {
            _view.date = "Last update: \(currencyRate.date)"
            //Already selected
            if _selectedBottomIndex > -1 {
                let bottomCurrency = _allCurrencies[_selectedBottomIndex]
//                _view.rate = "\(currencyRate.base.symbol) 1 = \(bottomCurrency.symbol) \(currencyRate.rates[bottomCurrency] ?? 0)"
            }
            convertValue()
        }
    }
    
    func numberOfSections() -> Int {
        return 1
    }
    
    func numberOfItems(in section: Int) -> Int {
        return _allCurrencies.count
    }
    
    func item(at indexPath: IndexPath) -> CurrencyListItemInterface? {
        return _allCurrencies[indexPath.row]
    }
    
    func didSelectTopItem(at indexPath: IndexPath) {
        if indexPath.row == _selectedBottomIndex {
            _selectedBottomIndex = -1
            clearInfo()
        }
        _view.enableCurrencyButtonBottom()
        _selectedTopIndex = indexPath.row
        _view.showSelectedCurrency(_allCurrencies[_selectedTopIndex], location: .top)
        _view.showOrHideTableView(.top)
        if !_cache.contains(where: { $0.base == _allCurrencies[_selectedTopIndex] }) {
            _loadRates()
        } else {
            showCurrencyRatesInfo()
        }
    }
    
    func didSelectBottomItem(at indexPath: IndexPath) {
        if indexPath.row == _selectedTopIndex {
            _wireframe.showAlert(with: "Attention", message: "You must select a different currency.")
        } else {
            _selectedBottomIndex = indexPath.row
            _view.showSelectedCurrency(_allCurrencies[_selectedBottomIndex], location: .bottom)
            _view.showOrHideTableView(.bottom)
            showCurrencyRatesInfo()
        }
    }
    
    func didTouchButtonCurrency(_ location: LayoutLocation) {
        _view.showOrHideTableView(location)
    }
    
    func editingChanged(_ text: String?) {
        if _selectedTopIndex > -1 {
            guard let text = text else { return }
            _view.bottomTextFieldText = ""
            _view.topTextFieldText = text.currencyInputFormatting()
            convertValue()
        } else {
            _view.topTextFieldText = "0,00"
            _wireframe.showAlert(with: "Attention", message: "You must select the currencies.")
        }
    }
    
}

//MARK: - Functions -

extension HomePresenter {
    
    private func clearInfo() {
        _view.bottomTextFieldText = "0,00"
        _view.date = ""
        _view.rate = ""
    }
    
    private func convertValue() {
        
        guard
            let topCurrency = _allCurrencies[safe: _selectedTopIndex],
//            let bottomCurrency = _allCurrencies[safe: _selectedBottomIndex],
            let currencyCacheRates = _cache.filter({ $0.name == topCurrency.name }).first?.rates.sorted(by: { $0.name < $1.name }),
            //let currencyRate = _cache.filter({ $0.base == topCurrency }).first?.rates[bottomCurrency],
            let valueToConvertString = _view.topTextFieldText,
            let valueToConvertDouble = valueToConvertString.toDouble()
        else { return }
        
        let currencyRate = currencyCacheRates[_selectedBottomIndex].value.doubleValue
        let valueConverted = currencyRate * valueToConvertDouble
        _view.bottomTextFieldText = "\(valueConverted.decimalFormat())"
    }
    
    @objc private func _loadRates() {
        _view.showLoading(true)
        _interactor.getCurrencies(base: _allCurrencies[_selectedTopIndex], completion: { [weak self] result in
            self?._handleFeedResult(result)
        })
    }
    
    private func _handleFeedResult(_ result: RequestResultType<CurrencyRates>) {
        switch result {
        case .success(let currencyRates):
            _view.showLoading(false)
            _view.reloadDatas()
//            _cache.append(currencyRates)
            showCurrencyRatesInfo()
            
            //Insert
            let _ = CacheCurrencyRates(currencyRates)
            _cache = CacheCurrencyRates.fetchAll()

            break
        case .failure(let errorResponse):
            _view.showError(error: errorResponse, target: self, action: #selector(self._loadRates))
            break
        }
    }
    
}
